#include <iostream>
#include <vector>
using namespace std;

int maxSquareSubmatrixWithAll1s(vector<vector<int>>& matrix) {
    if (matrix.empty() || matrix[0].empty()) return 0;  // Edge case: empty matrix

    int rows = matrix.size();
    int cols = matrix[0].size();
    int maxSize = 0;

    // Create a DP table initialized to 0
    vector<vector<int>> dp(rows, vector<int>(cols, 0);

    // Fill the DP table
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (matrix[i][j] == 1) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 1;  // Base case for first row and first column
                } else {
                    dp[i][j] = 1 + min({dp[i-1][j], dp[i][j-1], dp[i-1][j-1]});
                }
                maxSize = max(maxSize, dp[i][j]);  // Update the maximum size found
            }
        }
    }

    return maxSize;
}

int main() {
    int n, m;
    cout << "Enter number of rows and columns: ";
    cin >> n >> m;

    vector<vector<int>> matrix(n, vector<int>(m));

    cout << "Enter the elements of the binary matrix (0s and 1s):" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];
        }
    }

    int maxSize = maxSquareSubmatrixWithAll1s(matrix);
    cout << "The size of the largest square sub-matrix with all 1s is: " << maxSize << endl;

    return 0;
}
