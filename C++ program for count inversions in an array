#include <iostream>
#include <vector>
using namespace std;

int mergeAndCount(vector<int>& arr, int left, int mid, int right) {
    int i = left;      
    int j = mid + 1;   
    int k = 0;         
    int inversions = 0;

    vector<int> temp(right - left + 1);


    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inversions += (mid - i + 1); 
        }
    }


    while (i <= mid) {
        temp[k++] = arr[i++];
    }

  
    while (j <= right) {
        temp[k++] = arr[j++];
    }


    for (int p = 0; p < temp.size(); p++) {
        arr[left + p] = temp[p];
    }

    return inversions;
}


int mergeSortAndCount(vector<int>& arr, int left, int right) {
    int inversions = 0;

    if (left < right) {
        int mid = left + (right - left) / 2;

        inversions += mergeSortAndCount(arr, left, mid);

        inversions += mergeSortAndCount(arr, mid + 1, right);

  
        inversions += mergeAndCount(arr, left, mid, right);
    }

    return inversions;
}

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int inversionCount = mergeSortAndCount(arr, 0, n - 1);

    cout << "Number of inversions in the array: " << inversionCount << endl;

    return 0;
}
