#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

struct Element {
    int value;
    int frequency;
    int index;
};


bool compare(const Element& a, const Element& b) {
  
    if (a.frequency != b.frequency)
        return a.frequency > b.frequency;
   
    return a.index < b.index;
}

vector<int> sortByFrequency(const vector<int>& arr) {
    unordered_map<int, pair<int, int>> freqMap; 
    vector<Element> elements;

   
    for (int i = 0; i < arr.size(); i++) {
        if (freqMap.find(arr[i]) == freqMap.end()) {
            freqMap[arr[i]] = {1, i}; 
        } else {
            freqMap[arr[i]].first++; 
        }
    }

    
    for (const auto& entry : freqMap) {
        elements.push_back({entry.first, entry.second.first, entry.second.second});
    }


    sort(elements.begin(), elements.end(), compare);

 
    vector<int> result;
    for (const auto& elem : elements) {
        for (int i = 0; i < elem.frequency; i++) {
            result.push_back(elem.value);
        }
    }

    return result;
}

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    vector<int> sortedArr = sortByFrequency(arr);

  
    cout << "Array sorted by frequency: ";
    for (int num : sortedArr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
